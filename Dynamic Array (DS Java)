import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'dynamicArray' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. 2D_INTEGER_ARRAY queries
     */

    public static List<Integer> dynamicArray(int n, List<List<Integer>> queries) {
    // Write your code here
        List<List<Integer>>  computation = new ArrayList<>();
        List<Integer>  result = new ArrayList<>();

    for (int i = 0; i < n; i++) {
      computation.add(new ArrayList<>());
    }

    int lastAnswer = 0;
    for (int i = 0; i < queries.size(); i++) {
      List<Integer> q = queries.get(i);

      if (q.get(0) == 1) {
        computation.get((q.get(1) ^ lastAnswer) % n).add(q.get(2));
      } else {
        List<Integer> seq = computation.get((q.get(1) ^ lastAnswer) % n);
        lastAnswer = seq.get(q.get(2) % seq.size());
        result.add(lastAnswer);
      }
    }

    return result;

    }

}
